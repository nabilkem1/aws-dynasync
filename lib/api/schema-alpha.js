"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaAlpha = void 0;
const aws_appsync_alpha_1 = require("@aws-cdk/aws-appsync-alpha");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Class based on aws-appsync alpha Schema class,
 * deprecated in stable version but needed for
 * building schema in-progress
 */
class SchemaAlpha {
    constructor() {
        this.baseTypes = [];
        this.def = '';
    }
    bind(api) {
        return {
            apiId: api.apiId,
            definition: aws_cdk_lib_1.Lazy.string({
                produce: () => this.baseTypes.reduce((acc, type) => `${acc}${type._bindToGraphqlApi(api).toString()}\n`, `${this.declareSchema()}${this.def}`)
            })
        };
    }
    getDefinition(api) {
        return this.baseTypes.reduce((acc, type) => `${acc}${type._bindToGraphqlApi(api).toString()}\n`, `${this.declareSchema()}${this.def}`);
    }
    addToSchema(addition, delimiter = '') {
        this.def += `${delimiter}${addition}\n`;
    }
    addQuery(fieldName, field) {
        if (!this.query) {
            this.query = new aws_appsync_alpha_1.ObjectType('Query', { definition: {} });
            this.addType(this.query);
        }
        ;
        this.query.addField({ fieldName, field });
        return this.query;
    }
    addMutation(fieldName, field) {
        if (!this.mutation) {
            this.mutation = new aws_appsync_alpha_1.ObjectType('Mutation', { definition: {} });
            this.addType(this.mutation);
        }
        ;
        this.mutation.addField({ fieldName, field });
        return this.mutation;
    }
    addSubscription(fieldName, field) {
        var _a, _b;
        if (!this.subscription) {
            this.subscription = new aws_appsync_alpha_1.ObjectType('Subscription', { definition: {} });
            this.addType(this.subscription);
        }
        const directives = (_b = (_a = field.fieldOptions) === null || _a === void 0 ? void 0 : _a.directives) === null || _b === void 0 ? void 0 : _b.filter((directive) => directive.mutationFields);
        if (directives && directives.length > 1) {
            throw new Error(`Subscription fields must not have more than one directive. Received: ${directives.length}`);
        }
        this.subscription.addField({ fieldName, field });
        return this.subscription;
    }
    addType(type) {
        this.baseTypes.push(type);
        return type;
    }
    declareSchema() {
        if (!this.query && !this.mutation && !this.subscription) {
            return '';
        }
        const list = ['query', 'mutation', 'subscription'];
        return this.shapeAddition({
            prefix: 'schema',
            fields: list.map((key) => { var _a; return this[key] ? `${key}: ${(_a = this[key]) === null || _a === void 0 ? void 0 : _a.name}` : ''; })
                .filter((field) => field != ''),
        }) + '\n';
    }
    shapeAddition(options) {
        const typeName = () => { return options.name ? ` ${options.name}` : ''; };
        const interfaces = this.generateInterfaces(options.interfaceTypes);
        const directives = this.generateDirectives({
            directives: options.directives,
            modes: options.modes,
        });
        return options.fields.reduce((acc, field) => `${acc}  ${field}\n`, `${options.prefix}${typeName()}${interfaces}${directives} {\n`) + '}';
    }
    generateInterfaces(interfaceTypes) {
        if (!interfaceTypes || interfaceTypes.length === 0)
            return '';
        return interfaceTypes.reduce((acc, interfaceType) => `${acc} ${interfaceType.name} &`, ' implements').slice(0, -2);
    }
    generateDirectives(options) {
        if (!options.directives || options.directives.length === 0)
            return '';
        // reduce over all directives and get string version of the directive
        // pass in the auth modes for checks to happen on compile time
        return options.directives.reduce((acc, directive) => { var _a; return `${acc}${directive._bindToAuthModes(options.modes).toString()}${(_a = options.delimiter) !== null && _a !== void 0 ? _a : ' '}`; }, ' ').slice(0, -1);
    }
}
exports.SchemaAlpha = SchemaAlpha;
//# sourceMappingURL=data:application/json;base64,