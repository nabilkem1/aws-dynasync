"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncSchema = void 0;
const schema_alpha_1 = require("./schema-alpha");
const aws_appsync_alpha_1 = require("@aws-cdk/aws-appsync-alpha");
const util_1 = require("../util");
class AppSyncSchema {
    constructor(types) {
        this.root = new schema_alpha_1.SchemaAlpha();
        this.tables = [];
        this.graphTypes = ['id', 'string', 'int', 'float', 'boolean',
            'awsDate', 'awsTime', 'awsDateTime', 'awsTimestamp', 'awsEmail',
            'awsJson', 'awsUrl', 'awsPhone', 'awsIpAddress'];
        this.customTypes = [];
        this.types = {};
        if (types && Object.keys(types).length)
            this.initTypes(types);
    }
    bind(api) {
        return this.root.bind(api);
    }
    addTable(table) {
        var _a, _b;
        if (this.tables.some(t => t.tableName === table.tableName))
            return false;
        (0, util_1.validateTable)(table);
        const usedOperations = [];
        this.addType(table.baseName, { definition: table.attributes });
        let definition = { ...table.attributes };
        delete definition[table.pName];
        if (table.sName)
            delete definition[table.sName];
        let inputName = '';
        if (Object.keys(definition).length) {
            inputName = `${table.baseName}Input`;
            this.addInput(inputName, { definition });
        }
        const inputObject = inputName ? { input: inputName } : undefined;
        /** QUERIES */
        if (table.query) {
            if (table.scan) {
                this.root.addQuery(`scan${table.baseName}`, this.getField(table.baseName, {}, { isList: true }));
            }
            let getName = `get${table.baseName}By${(0, util_1.capitalize)(table.pName)}`;
            if (table.sName)
                getName += `And${(0, util_1.capitalize)(table.sName)}`;
            if (!usedOperations.includes(getName)) {
                this.root.addQuery(getName, this.getField(table.baseName, {
                    [table.pName]: table.attributes[table.pName]
                }, { isList: false }));
                usedOperations.push(getName);
            }
            if (table.sName) {
                const partitionKeyName = `list${table.baseName}By${(0, util_1.capitalize)(table.pName)}`;
                if (!usedOperations.includes(partitionKeyName)) {
                    this.root.addQuery(partitionKeyName, this.getField(table.baseName, {
                        [table.pName]: table.attributes[table.pName]
                    }, { isList: true }));
                    usedOperations.push(partitionKeyName);
                }
            }
            // Loop through indexes
            if ((_a = table.globalSecondaryIndexes) === null || _a === void 0 ? void 0 : _a.length) {
                table.globalSecondaryIndexes.forEach(index => {
                    const prefix = (index.sortKey || index.list) ? 'list' : 'get';
                    const getIndexName = `${prefix}${table.baseName}By${(0, util_1.capitalize)(index.pName)}`;
                    if (!usedOperations.includes(getIndexName)) {
                        this.root.addQuery(getIndexName, this.getField(table.baseName, {
                            [index.pName]: table.attributes[index.pName]
                        }, { isList: !!(index.sortKey || index.list) }));
                        usedOperations.push(getIndexName);
                    }
                    if (index.sName) {
                        const sortName = `get${table.baseName}By${(0, util_1.capitalize)(index.partitionKey.name)}And${(0, util_1.capitalize)(index.sName)}`;
                        if (!usedOperations.includes(sortName)) {
                            this.root.addQuery(sortName, this.getField(table.baseName, {
                                [index.pName]: table.attributes[index.pName],
                                [index.sName]: table.attributes[index.sName]
                            }, { isList: false }));
                            usedOperations.push(sortName);
                        }
                    }
                });
                if ((_b = table.localSecondaryIndexes) === null || _b === void 0 ? void 0 : _b.length) {
                    table.localSecondaryIndexes.forEach(index => {
                        const localName = `get${table.baseName}By${(0, util_1.capitalize)(table.pName)}And${(0, util_1.capitalize)(index.sName)}`;
                        if (!usedOperations.includes(localName)) {
                            this.root.addQuery(localName, this.getField(table.baseName, {
                                [table.pName]: table.attributes[table.pName],
                                [index.sName]: table.attributes[index.sName]
                            }, { isList: false }));
                            usedOperations.push(localName);
                        }
                    });
                }
            }
        }
        const primaryParams = {
            [table.pName]: table.attributes[table.pName],
        };
        if (table.sName)
            primaryParams[table.sName] = table.attributes[table.sName];
        /** MUTATIONS */
        if (table.mutation) {
            if (table.auto) {
                this.root.addMutation(`create${table.baseName}`, this.getField(table.baseName, inputObject));
            }
            const mutationParams = {
                ...primaryParams,
                ...(inputObject || {})
            };
            this.root.addMutation(`put${table.baseName}`, this.getField(table.baseName, mutationParams));
            this.root.addMutation(`delete${table.baseName}`, this.getField(table.baseName, primaryParams));
        }
        /** SUBSCRIPTIONS */
        if (table.subscription) {
            this.root.addSubscription(`on${table.baseName}Change`, this.getField(table.baseName, primaryParams));
        }
        this.tables.push(table);
        return table;
    }
    getType($type, $options = {}) {
        if (typeof $type !== 'string')
            return $type;
        const options = this.getBaseOptions($type, $options);
        const name = $type.replace(/[^a-z\_]/gi, '');
        const str = this.convertTypeName(name);
        if (this.graphTypes.includes(str))
            return aws_appsync_alpha_1.GraphqlType[str](options);
        if (!this.isType(str))
            throw new Error(`${name} is not a valid Type`);
        return aws_appsync_alpha_1.GraphqlType.intermediate({
            intermediateType: this.types[name],
            ...options
        });
    }
    getTypes(obj = {}) {
        const res = {};
        for (let o in obj) {
            if (obj.hasOwnProperty(o)) {
                res[o] = this.getType(obj[o]);
            }
        }
        return res;
    }
    getField(returnType, fields, $options = {}, directives) {
        const args = fields && Object.keys(fields).length ? this.getTypes(fields) : undefined;
        return new aws_appsync_alpha_1.Field({
            returnType: this.getType(returnType, $options),
            args,
            directives
        });
    }
    isType(type) {
        const name = this.convertTypeName(type);
        return this.graphTypes.includes(name) || this.customTypes.includes(name);
    }
    addType(name, props) {
        return this.$addType('type', name, props);
    }
    addInput(name, props) {
        return this.$addType('input', name, props);
    }
    getBaseOptions(type, $options = {}) {
        return {
            isList: /^\[[a-z]+[\?\!]?\]/i.test(type),
            isRequired: /^\[?[a-z]+\!\]?[\?\!]?$/i.test(type),
            isRequiredList: /\]\!$/.test(type),
            ...$options
        };
    }
    initTypes(types = {}) {
        for (let intermediateType in types) {
            if (types.hasOwnProperty(intermediateType)) {
                const keys = Object.keys(types[intermediateType]);
                if (keys.length) {
                    const type = types[intermediateType];
                    for (let typeName in type) {
                        if (type.hasOwnProperty(typeName)) {
                            const inter = intermediateType.substring(0, intermediateType.length - 1);
                            this.$addType(inter, typeName, type[typeName]);
                        }
                    }
                }
            }
        }
    }
    $addType(type, $name, props) {
        const name = $name.replace(/[^a-z\_]/gi, '');
        const str = this.convertTypeName(name);
        if (this.customTypes.some(a => a === str))
            return this.types[name];
        this.customTypes.push(str);
        if (Array.isArray(props)) {
            if (type === 'union') {
                const definition = props.map(prop => {
                    if (typeof prop === 'string')
                        return this.types[prop];
                    return prop;
                }, this);
                this.types[name] = new aws_appsync_alpha_1.UnionType(name, { definition });
            }
            else if (type === 'enum') {
                const definition = props.map(prop => {
                    if (typeof prop !== 'string')
                        throw new Error('Enum types must contain strings only.');
                    return prop;
                });
                this.types[name] = new aws_appsync_alpha_1.EnumType(name, { definition });
            }
            else {
                throw new Error('Only Union and Enum types can be passed as an array, Type: ' + type);
            }
        }
        else {
            const definition = (props.definition && typeof props.definition === 'object') ?
                this.getTypes(props.definition) : this.getTypes(props);
            const options = {
                ...props,
                definition
            };
            switch (type) {
                case 'type':
                    this.types[name] = new aws_appsync_alpha_1.ObjectType(name, options);
                    break;
                case 'input':
                    this.types[name] = new aws_appsync_alpha_1.InputType(name, options);
                    break;
                case 'interface':
                    this.types[name] = new aws_appsync_alpha_1.InterfaceType(name, options);
                    break;
                default: throw new Error(`Type "${type}" is not compatible with props provided`);
            }
        }
        this.root.addType(this.types[name]);
        return this.types[name];
    }
    convertTypeName(type) {
        var _a;
        if (!type.length)
            return type;
        const words = type.split('_');
        const firstWord = ((_a = words.shift()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
        return firstWord + words.map(w => w.substring(0, 1).toUpperCase() + w.substring(1).toLowerCase()).join('');
    }
}
exports.AppSyncSchema = AppSyncSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsaURBRXdCO0FBU3hCLGtFQWFvQztBQUNwQyxrQ0FBb0Q7QUFFcEQsTUFBYSxhQUFhO0lBVXRCLFlBQVksS0FBc0I7UUFUekIsU0FBSSxHQUFHLElBQUksMEJBQVcsRUFBRSxDQUFDO1FBRXhCLFdBQU0sR0FBYSxFQUFFLENBQUM7UUFDdEIsZUFBVSxHQUFHLENBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLFNBQVM7WUFDN0QsU0FBUyxFQUFDLFNBQVMsRUFBQyxhQUFhLEVBQUMsY0FBYyxFQUFFLFVBQVU7WUFDNUQsU0FBUyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEMsZ0JBQVcsR0FBWSxFQUFFLENBQUE7UUFDekIsVUFBSyxHQUFxQixFQUFFLENBQUE7UUFHbEMsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNO1lBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQWU7UUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWM7O1FBRW5CLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN6RSxJQUFBLG9CQUFhLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsTUFBTSxjQUFjLEdBQVksRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLENB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QUMsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sU0FBUyxHQUFHLENBQUEsTUFBQSxLQUFLLENBQUMsS0FBSyxFQUFFLDBDQUFFLFdBQVcsRUFBRSxLQUFJLEVBQUUsQ0FBQztRQUNyRCxPQUFPLFNBQVMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzdCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQ2hFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNKO0FBNVBELHNDQTRQQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICAgIElHcmFwaHFsQXBpLCBcbiAgICBJU2NoZW1hLCBcbiAgICBJU2NoZW1hQ29uZmlnIFxufSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBwc3luYyc7XG5pbXBvcnQgeyBEYlRhYmxlIH0gZnJvbSAnLi4vZGIvdGFibGUnO1xuaW1wb3J0IHsgXG4gICAgU2NoZW1hQWxwaGFcbn0gZnJvbSAnLi9zY2hlbWEtYWxwaGEnO1xuaW1wb3J0IHsgXG4gICAgU2NoZW1hT2JqZWN0LFxuICAgIEdyYXBoUWxUeXBlTGlzdCwgXG4gICAgSW50ZXJtZWRpYXRlVHlwZSwgXG4gICAgSW50ZXJtZWRpYXRlVHlwZVByb3BzLCBcbiAgICBJbnRlcm1lZGlhdGVUeXBlcywgXG4gICAgU2NoZW1hRmllbGRzXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFxuICAgIEdyYXBocWxUeXBlLCBcbiAgICBCYXNlVHlwZU9wdGlvbnMsIFxuICAgIE9iamVjdFR5cGUsIFxuICAgIElJbnRlcm1lZGlhdGVUeXBlLCBcbiAgICBJbnB1dFR5cGUsIFxuICAgIEludGVyZmFjZVR5cGUsIFxuICAgIFVuaW9uVHlwZSwgXG4gICAgRW51bVR5cGUsIFxuICAgIERpcmVjdGl2ZSwgXG4gICAgRmllbGQsIFxuICAgIEdyYXBocWxUeXBlT3B0aW9ucyxcbiAgICBJbnRlcm1lZGlhdGVUeXBlT3B0aW9ucyBcbn0gZnJvbSAnQGF3cy1jZGsvYXdzLWFwcHN5bmMtYWxwaGEnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgdmFsaWRhdGVUYWJsZSB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgQXBwU3luY1NjaGVtYSBpbXBsZW1lbnRzIElTY2hlbWEge1xuICAgIHJlYWRvbmx5IHJvb3QgPSBuZXcgU2NoZW1hQWxwaGEoKTtcblxuICAgIHByb3RlY3RlZCB0YWJsZXM6RGJUYWJsZVtdID0gW107XG4gICAgcHJvdGVjdGVkIGdyYXBoVHlwZXMgPSBbJ2lkJywnc3RyaW5nJywnaW50JywnZmxvYXQnLCdib29sZWFuJyxcbiAgICAnYXdzRGF0ZScsJ2F3c1RpbWUnLCdhd3NEYXRlVGltZScsJ2F3c1RpbWVzdGFtcCcsICdhd3NFbWFpbCcsXG4gICAgJ2F3c0pzb24nLCdhd3NVcmwnLCdhd3NQaG9uZScsJ2F3c0lwQWRkcmVzcyddO1xuICAgIHByb3RlY3RlZCBjdXN0b21UeXBlczpzdHJpbmdbXSA9IFtdXG4gICAgcHJvdGVjdGVkIHR5cGVzOkludGVybWVkaWF0ZVR5cGVzID0ge31cblxuICAgIGNvbnN0cnVjdG9yKHR5cGVzPzpHcmFwaFFsVHlwZUxpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVzICYmIE9iamVjdC5rZXlzKHR5cGVzKS5sZW5ndGgpIHRoaXMuaW5pdFR5cGVzKHR5cGVzKTtcbiAgICB9XG5cbiAgICBiaW5kKGFwaTpJR3JhcGhxbEFwaSk6IElTY2hlbWFDb25maWcge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmJpbmQoYXBpKTtcbiAgICB9XG5cbiAgICBhZGRUYWJsZSh0YWJsZTogRGJUYWJsZSk6IERiVGFibGUgfCBmYWxzZSB7XG5cbiAgICAgICAgaWYgKHRoaXMudGFibGVzLnNvbWUodCA9PiB0LnRhYmxlTmFtZSA9PT0gdGFibGUudGFibGVOYW1lKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YWxpZGF0ZVRhYmxlKHRhYmxlKTtcbiAgICAgICAgY29uc3QgdXNlZE9wZXJhdGlvbnM6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgdGhpcy5hZGRUeXBlKHRhYmxlLmJhc2VOYW1lLCB7ZGVmaW5pdGlvbjp0YWJsZS5hdHRyaWJ1dGVzfSk7XG4gICAgICAgIGxldCBkZWZpbml0aW9uID0gey4uLnRhYmxlLmF0dHJpYnV0ZXN9O1xuICAgICAgICBkZWxldGUgZGVmaW5pdGlvblt0YWJsZS5wTmFtZV07XG4gICAgICAgIGlmICh0YWJsZS5zTmFtZSkgZGVsZXRlIGRlZmluaXRpb25bdGFibGUuc05hbWVdO1xuICAgICAgICBsZXQgaW5wdXROYW1lOiBzdHJpbmcgPSAnJ1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoZGVmaW5pdGlvbikubGVuZ3RoKSB7XG4gICAgICAgICAgICBpbnB1dE5hbWUgPSBgJHt0YWJsZS5iYXNlTmFtZX1JbnB1dGA7XG4gICAgICAgICAgICB0aGlzLmFkZElucHV0KGlucHV0TmFtZSwge2RlZmluaXRpb259KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dE9iamVjdCA9IGlucHV0TmFtZSA/IHsgaW5wdXQ6IGlucHV0TmFtZSB9IDogdW5kZWZpbmVkO1xuXG4gICAgICAgIC8qKiBRVUVSSUVTICovXG4gICAgICAgIGlmICh0YWJsZS5xdWVyeSkge1xuICAgICAgICAgICAgaWYgKHRhYmxlLnNjYW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QuYWRkUXVlcnkoYHNjYW4ke3RhYmxlLmJhc2VOYW1lfWAsIHRoaXMuZ2V0RmllbGQodGFibGUuYmFzZU5hbWUsIHt9LCB7aXNMaXN0OnRydWV9KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBnZXROYW1lID0gYGdldCR7dGFibGUuYmFzZU5hbWV9Qnkke2NhcGl0YWxpemUodGFibGUucE5hbWUpfWA7XG4gICAgICAgICAgICBpZiAodGFibGUuc05hbWUpIGdldE5hbWUgKz0gYEFuZCR7Y2FwaXRhbGl6ZSh0YWJsZS5zTmFtZSl9YDtcbiAgICAgICAgICAgIGlmICghdXNlZE9wZXJhdGlvbnMuaW5jbHVkZXMoZ2V0TmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QuYWRkUXVlcnkoZ2V0TmFtZSwgdGhpcy5nZXRGaWVsZCh0YWJsZS5iYXNlTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBbdGFibGUucE5hbWVdOiB0YWJsZS5hdHRyaWJ1dGVzW3RhYmxlLnBOYW1lXVxuICAgICAgICAgICAgICAgIH0sIHtpc0xpc3Q6ZmFsc2V9KSk7XG4gICAgICAgICAgICAgICAgdXNlZE9wZXJhdGlvbnMucHVzaChnZXROYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhYmxlLnNOYW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydGl0aW9uS2V5TmFtZSA9IGBsaXN0JHt0YWJsZS5iYXNlTmFtZX1CeSR7Y2FwaXRhbGl6ZSh0YWJsZS5wTmFtZSl9YDtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZWRPcGVyYXRpb25zLmluY2x1ZGVzKHBhcnRpdGlvbktleU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5hZGRRdWVyeShwYXJ0aXRpb25LZXlOYW1lLCB0aGlzLmdldEZpZWxkKHRhYmxlLmJhc2VOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbdGFibGUucE5hbWVdOiB0YWJsZS5hdHRyaWJ1dGVzW3RhYmxlLnBOYW1lXVxuICAgICAgICAgICAgICAgICAgICB9LCB7aXNMaXN0OnRydWV9KSk7XG4gICAgICAgICAgICAgICAgICAgIHVzZWRPcGVyYXRpb25zLnB1c2gocGFydGl0aW9uS2V5TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggaW5kZXhlc1xuICAgICAgICAgICAgaWYgKHRhYmxlLmdsb2JhbFNlY29uZGFyeUluZGV4ZXM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRhYmxlLmdsb2JhbFNlY29uZGFyeUluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IChpbmRleC5zb3J0S2V5IHx8IGluZGV4Lmxpc3QpID8gJ2xpc3QnIDogJ2dldCc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldEluZGV4TmFtZSA9IGAke3ByZWZpeH0ke3RhYmxlLmJhc2VOYW1lfUJ5JHtjYXBpdGFsaXplKGluZGV4LnBOYW1lKX1gXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZWRPcGVyYXRpb25zLmluY2x1ZGVzKGdldEluZGV4TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5hZGRRdWVyeShnZXRJbmRleE5hbWUsIHRoaXMuZ2V0RmllbGQodGFibGUuYmFzZU5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaW5kZXgucE5hbWVdOiB0YWJsZS5hdHRyaWJ1dGVzW2luZGV4LnBOYW1lXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge2lzTGlzdDohIShpbmRleC5zb3J0S2V5IHx8IGluZGV4Lmxpc3QpfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZE9wZXJhdGlvbnMucHVzaChnZXRJbmRleE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXguc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvcnROYW1lID0gYGdldCR7dGFibGUuYmFzZU5hbWV9Qnkke2NhcGl0YWxpemUoaW5kZXgucGFydGl0aW9uS2V5Lm5hbWUpfUFuZCR7Y2FwaXRhbGl6ZShpbmRleC5zTmFtZSl9YFxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlZE9wZXJhdGlvbnMuaW5jbHVkZXMoc29ydE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LmFkZFF1ZXJ5KHNvcnROYW1lLCB0aGlzLmdldEZpZWxkKHRhYmxlLmJhc2VOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbmRleC5wTmFtZV06IHRhYmxlLmF0dHJpYnV0ZXNbaW5kZXgucE5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaW5kZXguc05hbWVdOiB0YWJsZS5hdHRyaWJ1dGVzW2luZGV4LnNOYW1lXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtpc0xpc3Q6ZmFsc2V9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZE9wZXJhdGlvbnMucHVzaChzb3J0TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlLmxvY2FsU2Vjb25kYXJ5SW5kZXhlcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmxvY2FsU2Vjb25kYXJ5SW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IGBnZXQke3RhYmxlLmJhc2VOYW1lfUJ5JHtjYXBpdGFsaXplKHRhYmxlLnBOYW1lKX1BbmQke2NhcGl0YWxpemUoaW5kZXguc05hbWUpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlZE9wZXJhdGlvbnMuaW5jbHVkZXMobG9jYWxOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5hZGRRdWVyeShsb2NhbE5hbWUsIHRoaXMuZ2V0RmllbGQodGFibGUuYmFzZU5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RhYmxlLnBOYW1lXTogdGFibGUuYXR0cmlidXRlc1t0YWJsZS5wTmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbmRleC5zTmFtZV06IHRhYmxlLmF0dHJpYnV0ZXNbaW5kZXguc05hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwge2lzTGlzdDpmYWxzZX0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkT3BlcmF0aW9ucy5wdXNoKGxvY2FsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJpbWFyeVBhcmFtcyA9IHsgXG4gICAgICAgICAgICBbdGFibGUucE5hbWVdOiB0YWJsZS5hdHRyaWJ1dGVzW3RhYmxlLnBOYW1lXSxcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFibGUuc05hbWUpIHByaW1hcnlQYXJhbXNbdGFibGUuc05hbWVdID0gdGFibGUuYXR0cmlidXRlc1t0YWJsZS5zTmFtZV07XG4gICAgICAgIC8qKiBNVVRBVElPTlMgKi9cbiAgICAgICAgaWYgKHRhYmxlLm11dGF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGFibGUuYXV0bykge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5hZGRNdXRhdGlvbihgY3JlYXRlJHt0YWJsZS5iYXNlTmFtZX1gLCB0aGlzLmdldEZpZWxkKHRhYmxlLmJhc2VOYW1lLCBpbnB1dE9iamVjdCkpO1xuICAgICAgICAgICAgfSAgICAgIFxuICAgICAgICAgICAgY29uc3QgbXV0YXRpb25QYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4ucHJpbWFyeVBhcmFtcyxcbiAgICAgICAgICAgICAgICAuLi4oaW5wdXRPYmplY3QgfHwge30pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJvb3QuYWRkTXV0YXRpb24oYHB1dCR7dGFibGUuYmFzZU5hbWV9YCwgdGhpcy5nZXRGaWVsZCh0YWJsZS5iYXNlTmFtZSwgbXV0YXRpb25QYXJhbXMpKTtcbiAgICAgICAgICAgIHRoaXMucm9vdC5hZGRNdXRhdGlvbihgZGVsZXRlJHt0YWJsZS5iYXNlTmFtZX1gLCB0aGlzLmdldEZpZWxkKHRhYmxlLmJhc2VOYW1lLCBwcmltYXJ5UGFyYW1zKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogU1VCU0NSSVBUSU9OUyAqL1xuICAgICAgICBpZiAodGFibGUuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QuYWRkU3Vic2NyaXB0aW9uKGBvbiR7dGFibGUuYmFzZU5hbWV9Q2hhbmdlYCwgdGhpcy5nZXRGaWVsZCh0YWJsZS5iYXNlTmFtZSwgcHJpbWFyeVBhcmFtcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBnZXRUeXBlKCR0eXBlOnN0cmluZyB8IEdyYXBocWxUeXBlLCAkb3B0aW9uczogR3JhcGhxbFR5cGVPcHRpb25zID0ge30pOiBHcmFwaHFsVHlwZSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHR5cGUgIT09ICdzdHJpbmcnKSByZXR1cm4gJHR5cGU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldEJhc2VPcHRpb25zKCR0eXBlLCAkb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAkdHlwZS5yZXBsYWNlKC9bXmEtelxcX10vZ2ksICcnKTtcbiAgICAgICAgY29uc3Qgc3RyID0gdGhpcy5jb252ZXJ0VHlwZU5hbWUobmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmdyYXBoVHlwZXMuaW5jbHVkZXMoc3RyKSkgcmV0dXJuIEdyYXBocWxUeXBlW3N0cl0ob3B0aW9ucyk7XG4gICAgICAgIGlmICghdGhpcy5pc1R5cGUoc3RyKSkgdGhyb3cgbmV3IEVycm9yKGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIFR5cGVgKTtcbiAgICAgICAgcmV0dXJuIEdyYXBocWxUeXBlLmludGVybWVkaWF0ZSh7XG4gICAgICAgICAgICBpbnRlcm1lZGlhdGVUeXBlOnRoaXMudHlwZXNbbmFtZV0sXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFR5cGVzKG9iajpTY2hlbWFPYmplY3QgPSB7fSk6IFNjaGVtYUZpZWxkcyB7XG4gICAgICAgIGNvbnN0IHJlczpTY2hlbWFGaWVsZHMgPSB7fVxuICAgICAgICBmb3IgKGxldCBvIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShvKSkge1xuICAgICAgICAgICAgICAgIHJlc1tvXSA9IHRoaXMuZ2V0VHlwZShvYmpbb10pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBnZXRGaWVsZChyZXR1cm5UeXBlOiBzdHJpbmcsIGZpZWxkcz86IFNjaGVtYU9iamVjdCwgJG9wdGlvbnM6IEdyYXBocWxUeXBlT3B0aW9ucyA9IHt9LCBkaXJlY3RpdmVzPzpEaXJlY3RpdmVbXSk6IEZpZWxkIHtcbiAgICAgICAgY29uc3QgYXJncyA9IGZpZWxkcyAmJiBPYmplY3Qua2V5cyhmaWVsZHMpLmxlbmd0aCA/IHRoaXMuZ2V0VHlwZXMoZmllbGRzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZCh7XG4gICAgICAgICAgICByZXR1cm5UeXBlOiB0aGlzLmdldFR5cGUocmV0dXJuVHlwZSwgJG9wdGlvbnMpLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBpc1R5cGUodHlwZTpzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY29udmVydFR5cGVOYW1lKHR5cGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFR5cGVzLmluY2x1ZGVzKG5hbWUpIHx8IHRoaXMuY3VzdG9tVHlwZXMuaW5jbHVkZXMobmFtZSk7XG4gICAgfVxuXG4gICAgYWRkVHlwZShuYW1lOnN0cmluZywgcHJvcHM6IEludGVybWVkaWF0ZVR5cGVQcm9wcyk6SUludGVybWVkaWF0ZVR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy4kYWRkVHlwZSgndHlwZScsIG5hbWUsIHByb3BzKTtcbiAgICB9XG5cbiAgICBhZGRJbnB1dChuYW1lOnN0cmluZywgcHJvcHM6IEludGVybWVkaWF0ZVR5cGVQcm9wcyk6SUludGVybWVkaWF0ZVR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy4kYWRkVHlwZSgnaW5wdXQnLCBuYW1lLCBwcm9wcyk7XG4gICAgfVxuICAgIFxuICAgIGdldEJhc2VPcHRpb25zKHR5cGU6c3RyaW5nLCAkb3B0aW9uczogR3JhcGhxbFR5cGVPcHRpb25zID0ge30pOiBCYXNlVHlwZU9wdGlvbnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNMaXN0Oi9eXFxbW2Etel0rW1xcP1xcIV0/XFxdL2kudGVzdCh0eXBlKSxcbiAgICAgICAgICAgIGlzUmVxdWlyZWQ6L15cXFs/W2Etel0rXFwhXFxdP1tcXD9cXCFdPyQvaS50ZXN0KHR5cGUpLFxuICAgICAgICAgICAgaXNSZXF1aXJlZExpc3Q6L1xcXVxcISQvLnRlc3QodHlwZSksXG4gICAgICAgICAgICAuLi4kb3B0aW9uc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdFR5cGVzKHR5cGVzOkdyYXBoUWxUeXBlTGlzdCA9IHt9KSB7XG4gICAgICAgIGZvciAobGV0IGludGVybWVkaWF0ZVR5cGUgaW4gdHlwZXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlcy5oYXNPd25Qcm9wZXJ0eShpbnRlcm1lZGlhdGVUeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0eXBlc1tpbnRlcm1lZGlhdGVUeXBlXSk7XG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlc1tpbnRlcm1lZGlhdGVUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdHlwZU5hbWUgaW4gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUuaGFzT3duUHJvcGVydHkodHlwZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXIgPSBpbnRlcm1lZGlhdGVUeXBlLnN1YnN0cmluZygwLCBpbnRlcm1lZGlhdGVUeXBlLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGFkZFR5cGUoaW50ZXIgYXMgSW50ZXJtZWRpYXRlVHlwZSwgdHlwZU5hbWUsIHR5cGVbdHlwZU5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCAkYWRkVHlwZShcbiAgICAgICAgdHlwZTpJbnRlcm1lZGlhdGVUeXBlLCBcbiAgICAgICAgJG5hbWU6c3RyaW5nLCBcbiAgICAgICAgcHJvcHM6IFNjaGVtYU9iamVjdCB8IEludGVybWVkaWF0ZVR5cGVQcm9wcyB8IChzdHJpbmcgfCBJSW50ZXJtZWRpYXRlVHlwZSlbXVxuICAgICk6IElJbnRlcm1lZGlhdGVUeXBlIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICRuYW1lLnJlcGxhY2UoL1teYS16XFxfXS9naSwgJycpO1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLmNvbnZlcnRUeXBlTmFtZShuYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tVHlwZXMuc29tZShhID0+IGEgPT09IHN0cikpIHJldHVybiB0aGlzLnR5cGVzW25hbWVdOyAgICAgICAgXG4gICAgICAgIHRoaXMuY3VzdG9tVHlwZXMucHVzaChzdHIpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAndW5pb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbjpJSW50ZXJtZWRpYXRlVHlwZVtdID0gcHJvcHMubWFwKHByb3AgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSByZXR1cm4gdGhpcy50eXBlc1twcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgICAgICAgICAgfSx0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVzW25hbWVdID0gbmV3IFVuaW9uVHlwZShuYW1lLHtkZWZpbml0aW9ufSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdlbnVtJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb246c3RyaW5nW10gPSBwcm9wcy5tYXAocHJvcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignRW51bSB0eXBlcyBtdXN0IGNvbnRhaW4gc3RyaW5ncyBvbmx5LicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVzW25hbWVdID0gbmV3IEVudW1UeXBlKG5hbWUse2RlZmluaXRpb259KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IFVuaW9uIGFuZCBFbnVtIHR5cGVzIGNhbiBiZSBwYXNzZWQgYXMgYW4gYXJyYXksIFR5cGU6ICcgKyB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSAocHJvcHMuZGVmaW5pdGlvbiAmJiB0eXBlb2YgcHJvcHMuZGVmaW5pdGlvbiA9PT0gJ29iamVjdCcpID8gXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUeXBlcyhwcm9wcy5kZWZpbml0aW9uKSA6IHRoaXMuZ2V0VHlwZXMocHJvcHMgYXMgU2NoZW1hT2JqZWN0KVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uczpJbnRlcm1lZGlhdGVUeXBlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndHlwZSc6IHRoaXMudHlwZXNbbmFtZV0gPSBuZXcgT2JqZWN0VHlwZShuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbnB1dCc6IHRoaXMudHlwZXNbbmFtZV0gPSBuZXcgSW5wdXRUeXBlKG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ludGVyZmFjZSc6IHRoaXMudHlwZXNbbmFtZV0gPSBuZXcgSW50ZXJmYWNlVHlwZShuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgXCIke3R5cGV9XCIgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBwcm9wcyBwcm92aWRlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdC5hZGRUeXBlKHRoaXMudHlwZXNbbmFtZV0pO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlc1tuYW1lXVxuICAgIH1cblxuICAgIHByaXZhdGUgY29udmVydFR5cGVOYW1lKHR5cGU6c3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0eXBlLmxlbmd0aCkgcmV0dXJuIHR5cGU7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gdHlwZS5zcGxpdCgnXycpO1xuICAgICAgICBjb25zdCBmaXJzdFdvcmQgPSB3b3Jkcy5zaGlmdCgpPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgICAgICByZXR1cm4gZmlyc3RXb3JkICsgd29yZHMubWFwKHcgPT4gXG4gICAgICAgICAgICB3LnN1YnN0cmluZygwLDEpLnRvVXBwZXJDYXNlKCkgKyB3LnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkuam9pbignJyk7XG4gICAgfVxufSJdfQ==