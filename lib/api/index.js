"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncStack = void 0;
const schema_1 = require("./schema");
const util_1 = require("../util");
const table_1 = require("../db/table");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
class AppSyncStack {
    constructor(scope, id, props) {
        this.scope = scope;
        this.id = id;
        this.props = props;
        this.tables = [];
        this.data = [];
        this.schema = new schema_1.AppSyncSchema();
        this.tables = props.tables.reduce((acc, table) => {
            let inst;
            if (table instanceof table_1.DbTable) {
                if (this.props.tableProps)
                    throw new Error(`Cannot pass additional table props when using already-instantiated DbTable instance for table ${table.tableName}`);
                inst = table;
            }
            else {
                if (props.tableProps)
                    table.tableProps = {
                        ...table.tableProps || {},
                        ...props.tableProps
                    };
                inst = new table_1.DbTable(this.scope, table, table.prefix);
            }
            const res = this.addTableSchema(inst);
            if (res)
                acc.push(res);
            return acc;
        }, []);
        this.schema.initTypes(this.props.schemaTypes);
        this.api = this.getApi(this.schema, props.config, props.apiProps);
        this.tables = this.tables.map(table => this.addTableApi(table));
    }
    get config() {
        return this.props.config;
    }
    getApi(schema, authorizationConfig, apiProps) {
        const nm = (0, util_1.getName)(this.id, 'GraphQlApi');
        return new aws_appsync_1.GraphqlApi(this.scope, nm, {
            name: nm,
            schema,
            authorizationConfig,
            xrayEnabled: true,
            ...(apiProps || {})
        });
    }
    addTableSchema($table) {
        const table = this.schema.addTable($table);
        if (table)
            this.tables.push(table);
        return table;
    }
    addTableApi(table) {
        table.addApi(this.api, this.schema);
        return table;
    }
    validateTable(table) {
        return (0, util_1.validateTable)(table);
    }
}
exports.AppSyncStack = AppSyncStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUF5QztBQUN6QyxrQ0FBaUQ7QUFDakQsdUNBQXNDO0FBRXRDLHlEQUtpQztBQVVqQyxNQUFhLFlBQVk7SUFNckIsWUFDVyxLQUFnQixFQUNiLEVBQVUsRUFDWixLQUF3QjtRQUZ6QixVQUFLLEdBQUwsS0FBSyxDQUFXO1FBQ2IsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNaLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBTnBDLFdBQU0sR0FBYyxFQUFFLENBQUE7UUFDdEIsU0FBSSxHQUF5QixFQUFFLENBQUM7UUFPNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHNCQUFhLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzdDLElBQUksSUFBWSxDQUFBO1lBQ2hCLElBQUksS0FBSyxZQUFZLGVBQU8sRUFBRTtnQkFDMUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVU7b0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpR0FBaUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7Z0JBQy9KLElBQUksR0FBRyxLQUFLLENBQUM7YUFDaEI7aUJBQU07Z0JBQ0gsSUFBSSxLQUFLLENBQUMsVUFBVTtvQkFBRSxLQUFLLENBQUMsVUFBVSxHQUFHO3dCQUNyQyxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRTt3QkFDekIsR0FBRyxLQUFLLENBQUMsVUFBVTtxQkFDdEIsQ0FBQTtnQkFDRCxJQUFJLEdBQUcsSUFBSSxlQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUcsS0FBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4RTtZQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsSUFBSSxHQUFHO2dCQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDLEVBQUUsRUFBZSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFUyxNQUFNLENBQUMsTUFBZSxFQUFFLG1CQUF3QyxFQUFFLFFBQTBCO1FBQ2xHLE1BQU0sRUFBRSxHQUFHLElBQUEsY0FBTyxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLHdCQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxFQUFFLEVBQUU7WUFDUixNQUFNO1lBQ04sbUJBQW1CO1lBQ25CLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1NBQ3RCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBYztRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQyxJQUFJLEtBQUs7WUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWM7UUFDdEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWM7UUFDeEIsT0FBTyxJQUFBLG9CQUFhLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNKO0FBOURELG9DQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQXBwU3luY1NjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCB7IGdldE5hbWUsIHZhbGlkYXRlVGFibGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IERiVGFibGUgfSBmcm9tICcuLi9kYi90YWJsZSc7XG5pbXBvcnQgeyBTY2hlbWFUYWJsZSwgR3JhcGhRbFR5cGVMaXN0LCBBcHBzeW5jQXBpUHJvcHMsIER5bmFtb1RhYmxlUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICAgIEdyYXBocWxBcGksXG4gICAgSVNjaGVtYSxcbiAgICBEeW5hbW9EYkRhdGFTb3VyY2UsXG4gICAgQXV0aG9yaXphdGlvbkNvbmZpZ1xufSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBwc3luYyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwU3luY1N0YWNrUHJvcHMge1xuICAgIGNvbmZpZzogQXV0aG9yaXphdGlvbkNvbmZpZ1xuICAgIHRhYmxlczogKERiVGFibGUgfCBTY2hlbWFUYWJsZSlbXVxuICAgIHNjaGVtYVR5cGVzPzogR3JhcGhRbFR5cGVMaXN0XG4gICAgYXBpUHJvcHM/OiBBcHBzeW5jQXBpUHJvcHNcbiAgICB0YWJsZVByb3BzPzogRHluYW1vVGFibGVQcm9wc1xufVxuXG5leHBvcnQgY2xhc3MgQXBwU3luY1N0YWNrIHtcbiAgICBhcGk6IEdyYXBocWxBcGlcbiAgICBzY2hlbWE6IEFwcFN5bmNTY2hlbWFcbiAgICB0YWJsZXM6IERiVGFibGVbXSA9IFtdXG4gICAgZGF0YTogRHluYW1vRGJEYXRhU291cmNlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgc2NvcGU6IENvbnN0cnVjdCxcbiAgICAgICAgcHJvdGVjdGVkIGlkOiBzdHJpbmcsXG4gICAgICAgIHByaXZhdGUgcHJvcHM6IEFwcFN5bmNTdGFja1Byb3BzXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gbmV3IEFwcFN5bmNTY2hlbWEoKTtcbiAgICAgICAgdGhpcy50YWJsZXMgPSBwcm9wcy50YWJsZXMucmVkdWNlKChhY2MsIHRhYmxlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5zdDpEYlRhYmxlXG4gICAgICAgICAgICBpZiAodGFibGUgaW5zdGFuY2VvZiBEYlRhYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGFibGVQcm9wcykgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFzcyBhZGRpdGlvbmFsIHRhYmxlIHByb3BzIHdoZW4gdXNpbmcgYWxyZWFkeS1pbnN0YW50aWF0ZWQgRGJUYWJsZSBpbnN0YW5jZSBmb3IgdGFibGUgJHt0YWJsZS50YWJsZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgaW5zdCA9IHRhYmxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMudGFibGVQcm9wcykgdGFibGUudGFibGVQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGFibGUudGFibGVQcm9wcyB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHMudGFibGVQcm9wc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0ID0gbmV3IERiVGFibGUodGhpcy5zY29wZSwgdGFibGUsICh0YWJsZSBhcyBTY2hlbWFUYWJsZSkucHJlZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuYWRkVGFibGVTY2hlbWEoaW5zdCk7XG4gICAgICAgICAgICBpZiAocmVzKSBhY2MucHVzaChyZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgW10gYXMgRGJUYWJsZVtdKTtcbiAgICAgICAgdGhpcy5zY2hlbWEuaW5pdFR5cGVzKHRoaXMucHJvcHMuc2NoZW1hVHlwZXMpO1xuICAgICAgICB0aGlzLmFwaSA9IHRoaXMuZ2V0QXBpKHRoaXMuc2NoZW1hLCBwcm9wcy5jb25maWcsIHByb3BzLmFwaVByb3BzKTtcbiAgICAgICAgdGhpcy50YWJsZXMgPSB0aGlzLnRhYmxlcy5tYXAodGFibGUgPT4gdGhpcy5hZGRUYWJsZUFwaSh0YWJsZSkpO1xuICAgIH1cblxuICAgIGdldCBjb25maWcoKTogQXV0aG9yaXphdGlvbkNvbmZpZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvbmZpZztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QXBpKHNjaGVtYTogSVNjaGVtYSwgYXV0aG9yaXphdGlvbkNvbmZpZzogQXV0aG9yaXphdGlvbkNvbmZpZywgYXBpUHJvcHM/OiBBcHBzeW5jQXBpUHJvcHMpOiBHcmFwaHFsQXBpIHtcbiAgICAgICAgY29uc3Qgbm0gPSBnZXROYW1lKHRoaXMuaWQsICdHcmFwaFFsQXBpJyk7XG4gICAgICAgIHJldHVybiBuZXcgR3JhcGhxbEFwaSh0aGlzLnNjb3BlLCBubSwge1xuICAgICAgICAgICAgbmFtZTogbm0sXG4gICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICBhdXRob3JpemF0aW9uQ29uZmlnLFxuICAgICAgICAgICAgeHJheUVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAuLi4oYXBpUHJvcHMgfHwge30pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFRhYmxlU2NoZW1hKCR0YWJsZTpEYlRhYmxlKTogRGJUYWJsZSB8IGZhbHNlIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSB0aGlzLnNjaGVtYS5hZGRUYWJsZSgkdGFibGUpO1xuICAgICAgICBpZiAodGFibGUpIHRoaXMudGFibGVzLnB1c2godGFibGUpO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgYWRkVGFibGVBcGkodGFibGU6IERiVGFibGUpOiBEYlRhYmxlIHtcbiAgICAgICAgdGFibGUuYWRkQXBpKHRoaXMuYXBpLCB0aGlzLnNjaGVtYSk7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZVRhYmxlKHRhYmxlOiBEYlRhYmxlKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZVRhYmxlKHRhYmxlKTtcbiAgICB9XG59XG4iXX0=