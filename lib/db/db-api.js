"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbApi = void 0;
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const util_1 = require("../util");
class DbApi {
    constructor(scope, id, api, schema, table) {
        var _a, _b;
        this.scope = scope;
        this.id = id;
        this.api = api;
        this.schema = schema;
        this.table = table;
        (0, util_1.validateTable)(table);
        this.dataSource = new aws_appsync_1.DynamoDbDataSource(scope, `${id}-${this.table.tableName}DataSource`, {
            api,
            name: `${this.table.tableName}DataSource`,
            table: table.construct
        });
        const usedOperations = [];
        const dataSource = this.dataSource;
        /** QUERIES */
        if (table.query) {
            if (table.scan) {
                // Get Whole Table
                this.api.createResolver(`scan${table.baseName}`, {
                    fieldName: `scan${table.baseName}`,
                    typeName: 'Query',
                    dataSource,
                    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
                    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable()
                });
            }
            let getName = `get${table.baseName}By${(0, util_1.capitalize)(table.pName)}`;
            if (table.sName)
                getName += `And${(0, util_1.capitalize)(table.sName)}`;
            if (!usedOperations.includes(getName)) {
                this.api.createResolver(getName, {
                    fieldName: getName,
                    typeName: 'Query',
                    dataSource,
                    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                    requestMappingTemplate: table.sName ?
                        this.primaryTemplate(this.getPrimaryKey(table.pName, table.sName))
                        : aws_appsync_1.MappingTemplate.dynamoDbGetItem(table.pName, table.pName)
                });
                usedOperations.push(getName);
            }
            if (table.sName) {
                const partitionKeyName = `list${table.baseName}By${(0, util_1.capitalize)(table.pName)}`;
                if (!usedOperations.includes(partitionKeyName)) {
                    this.api.createResolver(partitionKeyName, {
                        fieldName: partitionKeyName,
                        typeName: 'Query',
                        dataSource,
                        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
                        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq(table.pName, table.pName))
                    });
                    usedOperations.push(partitionKeyName);
                }
            }
            // Loop through indexes
            if ((_a = table.globalSecondaryIndexes) === null || _a === void 0 ? void 0 : _a.length) {
                table.globalSecondaryIndexes.forEach(index => {
                    const prefix = (index.sortKey || index.list) ? 'list' : 'get';
                    const getIndexName = `${prefix}${table.baseName}By${(0, util_1.capitalize)(index.pName)}`;
                    if (!usedOperations.includes(getIndexName)) {
                        let index_name = '';
                        if (index.indexName) {
                            index_name = index.indexName;
                        }
                        else {
                            index_name = `global${table.baseName}${(0, util_1.capitalize)(index.pName)}${(0, util_1.capitalize)(index.sName || '')}`;
                        }
                        this.api.createResolver(getIndexName, {
                            fieldName: getIndexName,
                            typeName: 'Query',
                            dataSource,
                            responseMappingTemplate: (index.sortKey || index.list) ?
                                aws_appsync_1.MappingTemplate.dynamoDbResultList() :
                                aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                            requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq(index.pName, index.pName), index_name)
                        });
                        usedOperations.push(getIndexName);
                    }
                    if (index.sName) {
                        const sortName = `get${table.baseName}By${(0, util_1.capitalize)(index.pName)}And${(0, util_1.capitalize)(index.sName)}`;
                        if (!usedOperations.includes(sortName)) {
                            this.api.createResolver(sortName, {
                                fieldName: sortName,
                                typeName: 'Query',
                                dataSource,
                                responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                                requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq(index.pName, index.pName)
                                    .and(aws_appsync_1.KeyCondition.eq(index.sName, index.sName)), index.indexName)
                            });
                            usedOperations.push(sortName);
                        }
                    }
                });
                if ((_b = table.localSecondaryIndexes) === null || _b === void 0 ? void 0 : _b.length) {
                    table.localSecondaryIndexes.forEach(index => {
                        const localName = `get${table.baseName}By${(0, util_1.capitalize)(table.pName)}And${(0, util_1.capitalize)(index.sName)}`;
                        if (!usedOperations.includes(localName)) {
                            this.api.createResolver(localName, {
                                fieldName: localName,
                                typeName: 'Query',
                                dataSource,
                                responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                                requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq(table.pName, table.pName)
                                    .and(aws_appsync_1.KeyCondition.eq(index.sName, index.sName)), index.indexName)
                            });
                            usedOperations.push(localName);
                        }
                    });
                }
            }
        }
        /** MUTATIONS */
        if (table.mutation) {
            if (table.auto) {
                // Create item
                this.api.createResolver(`create${table.baseName}`, {
                    fieldName: `create${table.baseName}`,
                    typeName: 'Mutation',
                    dataSource,
                    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition(table.pName).auto(), aws_appsync_1.Values.projecting('input')),
                });
            }
            // Put item
            this.api.createResolver(`put${table.baseName}`, {
                fieldName: `put${table.baseName}`,
                typeName: 'Mutation',
                dataSource,
                responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(this.getPrimaryKey(table.pName, table.sName), aws_appsync_1.Values.projecting('input')),
            });
            // Delete item
            this.api.createResolver(`delete${table.baseName}`, {
                fieldName: `delete${table.baseName}`,
                typeName: 'Mutation',
                dataSource,
                responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                requestMappingTemplate: this.primaryTemplate(this.getPrimaryKey(table.pName, table.sName), "DeleteItem"),
            });
        }
        /** SUBSCRIPTIONS */
        if (table.subscription) {
            this.api.createResolver(`on${table.baseName}Change`, {
                fieldName: `on${table.baseName}Change`,
                typeName: 'Subscription',
                dataSource,
                responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
                requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(this.getPrimaryKey(table.pName, table.sName), aws_appsync_1.Values.projecting('input')),
            });
        }
    }
    primaryTemplate(primaryKey, operation = "GetItem") {
        return aws_appsync_1.MappingTemplate.fromString(`{"version": "2017-02-28", "operation": "${operation}", ${primaryKey.renderTemplate()}}`);
    }
    getPrimaryKey(partition, sort, auto) {
        const sortKey = sort ? this.assign(sort, auto === "sort") : undefined;
        return new aws_appsync_1.PrimaryKey(this.assign(partition, auto === "partition"), sortKey);
    }
    assign(name, auto = false) {
        const arg = auto ? "$util.autoId()" : `$ctx.args.${name}`;
        return new aws_appsync_1.Assign(name, arg);
    }
}
exports.DbApi = DbApi;
//# sourceMappingURL=data:application/json;base64,