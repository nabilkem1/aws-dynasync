"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbTable = void 0;
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const primary_1 = require("../key/primary");
const local_1 = require("../key/local");
const global_1 = require("../key/global");
const util_1 = require("../util");
const instance_1 = require("../key/instance");
const db_api_1 = require("./db-api");
class DbTable {
    constructor(scope, schemaTable, label) {
        this.scope = scope;
        this.schemaTable = schemaTable;
        this.label = label;
        this.baseName = this.schemaTable.tableName;
        this.tableName = this.label ? `${this.label}\.${this.schemaTable.tableName}` : this.schemaTable.tableName;
        this.props = {
            pointInTimeRecovery: true,
            ...(this.schemaTable.tableProps || {}),
        };
        this.localSecondaryIndexes = this.setLocalKeys(this.schemaTable.localSecondaryIndexes);
        this.globalSecondaryIndexes = this.setGlobalKeys(this.schemaTable.globalSecondaryIndexes);
        this.primaryKey = new primary_1.SchemaPrimaryKey(this.schemaTable.partitionKey, this.schemaTable.sortKey);
        this.attributes = this.setGraphAttributes(this.schemaTable.attributes || {});
        this.auto = this.schemaTable.auto || false;
        this.scan = this.schemaTable.scan || false;
        this.subscription = this.schemaTable.subscription || false;
        this.query = this.scan ? true : (this.schemaTable.hasOwnProperty('query') ? !!this.schemaTable.query : true);
        this.mutation = this.auto ? true : (this.schemaTable.hasOwnProperty('mutation') ? !!this.schemaTable.mutation : true);
        this.construct = new aws_dynamodb_1.Table(scope, this.tableName, {
            ...this.props,
            ...this.primaryKey.keySchema,
            tableName: this.tableName,
        });
        if (this.globalSecondaryIndexes)
            this.globalSecondaryIndexes.forEach(ind => this.construct.addGlobalSecondaryIndex(ind.props), this);
        if (this.localSecondaryIndexes)
            this.localSecondaryIndexes.forEach(ind => this.construct.addLocalSecondaryIndex(ind.props), this);
    }
    get pName() {
        return this.primaryKey.partitionKey.name;
    }
    get sName() {
        var _a;
        return (_a = this.primaryKey.sortKey) === null || _a === void 0 ? void 0 : _a.name;
    }
    addApi(api, schema) {
        this.api = new db_api_1.DbApi(this.scope, `${this.tableName}Api`, api, schema, this);
        return this.api;
    }
    setLocalKeys(keys) {
        if (!(keys === null || keys === void 0 ? void 0 : keys.length))
            return [];
        return keys.map($key => {
            if ($key instanceof local_1.SchemaLocalIndex)
                return $key;
            const key = typeof $key === 'string' ? {
                sortKey: new instance_1.KeyInstance($key, undefined, 'sort')
            } : $key;
            const name = key.indexName || `local${(0, util_1.capitalize)(this.tableName) + (0, util_1.capitalize)(typeof key.sortKey === 'string' ? key.sortKey : key.sortKey.name)}`;
            return new local_1.SchemaLocalIndex(name, key.sortKey, key.include);
        });
    }
    setGlobalKeys(keys) {
        if (!(keys === null || keys === void 0 ? void 0 : keys.length))
            return [];
        return keys.map($key => {
            if ($key instanceof global_1.SchemaGlobalIndex)
                return $key;
            const key = typeof $key === 'string' ? {
                partitionKey: new instance_1.KeyInstance($key, undefined, 'partition')
            } : $key;
            let name = '';
            if (key.indexName) {
                name = key.indexName;
            }
            else {
                const partitionKeyName = typeof key.partitionKey === 'string'
                    ? key.partitionKey
                    : key.partitionKey.name;
                const sortKeyName = key.sortKey
                    ? typeof key.sortKey === 'string'
                        ? key.sortKey
                        : key.sortKey.name
                    : '';
                name = `global${(0, util_1.capitalize)(this.tableName)}${(0, util_1.capitalize)(partitionKeyName)}${(0, util_1.capitalize)(sortKeyName)}`;
            }
            return new global_1.SchemaGlobalIndex(name, key.partitionKey, key.sortKey, key.list, key.include, key.capacity);
        });
    }
    setGraphAttributes(attrs) {
        if (typeof attrs === 'string')
            attrs = [attrs];
        let $attr = {};
        if (Array.isArray(attrs)) {
            attrs.forEach(at => {
                $attr[at] = 'string';
            });
        }
        else if (attrs && typeof attrs === 'object')
            $attr = attrs;
        return $attr;
    }
}
exports.DbTable = DbTable;
//# sourceMappingURL=data:application/json;base64,