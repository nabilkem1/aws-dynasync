"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyInstance = void 0;
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const sync_type_1 = require("./sync-type");
class KeyInstance {
    constructor(fieldName, $type, keyType) {
        if (fieldName instanceof KeyInstance) {
            this.name = fieldName.name;
            this.$type = $type ?
                typeof $type === 'string' ? $type :
                    $type.graphqlType :
                fieldName.type.graphqlType;
            this.keyType = keyType || fieldName.keyType;
        }
        else {
            this.name = fieldName;
            this.$type = $type ?
                typeof $type === 'string' ? $type :
                    $type.graphqlType :
                'String';
            this.keyType = keyType || 'partition';
        }
    }
    get templateType() {
        return {
            [this.name]: this.type.templateType
        };
    }
    get objectType() {
        return {
            [this.name]: this.type.graphqlType
        };
    }
    get attribute() {
        return {
            name: this.name,
            type: this.convertAttributeName(this.type.toDynamoAttribute())
        };
    }
    get type() {
        return new sync_type_1.SyncType(this.name, this.$type);
    }
    convertAttributeName(attr) {
        if (/^b/i.test(attr))
            return aws_dynamodb_1.AttributeType.BINARY;
        if (/^n/i.test(attr))
            return aws_dynamodb_1.AttributeType.NUMBER;
        return aws_dynamodb_1.AttributeType.STRING;
    }
}
exports.KeyInstance = KeyInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMva2V5L2luc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJEQUFvRTtBQUNwRSwyQ0FBdUM7QUFFdkMsTUFBYSxXQUFXO0lBTXBCLFlBQ0ksU0FBK0IsRUFDL0IsS0FBeUIsRUFDekIsT0FBOEI7UUFFOUIsSUFBSSxTQUFTLFlBQVksV0FBVyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztZQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUNoQixPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNuQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDL0M7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ25DLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDbkIsUUFBUSxDQUFDO1lBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksV0FBVyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU87WUFDSCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7U0FDdEMsQ0FBQTtJQUNMLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPO1lBQ0gsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1NBQ3JDLENBQUE7SUFDTCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTztZQUNILElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQ2pFLENBQUE7SUFDTCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLG9CQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVELG9CQUFvQixDQUFDLElBQVc7UUFDNUIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUFFLE9BQU8sNEJBQWEsQ0FBQyxNQUFNLENBQUM7UUFDbEQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUFFLE9BQU8sNEJBQWEsQ0FBQyxNQUFNLENBQUM7UUFDbEQsT0FBTyw0QkFBYSxDQUFDLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0NBSUo7QUEzREQsa0NBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXR0cmlidXRlLCBBdHRyaWJ1dGVUeXBlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0IHsgU3luY1R5cGUgfSBmcm9tIFwiLi9zeW5jLXR5cGVcIjtcblxuZXhwb3J0IGNsYXNzIEtleUluc3RhbmNlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nXG4gICAgcHVibGljIHJlYWRvbmx5IGtleVR5cGU6ICdwYXJ0aXRpb24nIHwgJ3NvcnQnXG5cbiAgICBwcml2YXRlICR0eXBlOiBzdHJpbmdcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZyB8IEtleUluc3RhbmNlLFxuICAgICAgICAkdHlwZT86IHN0cmluZyB8IFN5bmNUeXBlLFxuICAgICAgICBrZXlUeXBlPzogJ3BhcnRpdGlvbicgfCAnc29ydCcsXG4gICAgKSB7XG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW5zdGFuY2VvZiBLZXlJbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gZmllbGROYW1lLm5hbWU7XG4gICAgICAgICAgICB0aGlzLiR0eXBlID0gJHR5cGUgPyBcbiAgICAgICAgICAgICAgICB0eXBlb2YgJHR5cGUgPT09ICdzdHJpbmcnID8gJHR5cGUgOlxuICAgICAgICAgICAgICAgICR0eXBlLmdyYXBocWxUeXBlIDpcbiAgICAgICAgICAgICAgICBmaWVsZE5hbWUudHlwZS5ncmFwaHFsVHlwZTtcbiAgICAgICAgICAgIHRoaXMua2V5VHlwZSA9IGtleVR5cGUgfHwgZmllbGROYW1lLmtleVR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBmaWVsZE5hbWU7XG4gICAgICAgICAgICB0aGlzLiR0eXBlID0gJHR5cGUgPyBcbiAgICAgICAgICAgICAgICB0eXBlb2YgJHR5cGUgPT09ICdzdHJpbmcnID8gJHR5cGUgOlxuICAgICAgICAgICAgICAgICR0eXBlLmdyYXBocWxUeXBlIDpcbiAgICAgICAgICAgICAgICAnU3RyaW5nJztcbiAgICAgICAgICAgIHRoaXMua2V5VHlwZSA9IGtleVR5cGUgfHwgJ3BhcnRpdGlvbic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGVtcGxhdGVUeXBlKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW3RoaXMubmFtZV06IHRoaXMudHlwZS50ZW1wbGF0ZVR5cGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvYmplY3RUeXBlKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW3RoaXMubmFtZV06IHRoaXMudHlwZS5ncmFwaHFsVHlwZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGF0dHJpYnV0ZSgpOiBBdHRyaWJ1dGUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgdHlwZTogdGhpcy5jb252ZXJ0QXR0cmlidXRlTmFtZSh0aGlzLnR5cGUudG9EeW5hbW9BdHRyaWJ1dGUoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCB0eXBlKCk6IFN5bmNUeXBlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jVHlwZSh0aGlzLm5hbWUsIHRoaXMuJHR5cGUpXG4gICAgfVxuXG4gICAgY29udmVydEF0dHJpYnV0ZU5hbWUoYXR0cjpzdHJpbmcpOiBBdHRyaWJ1dGVUeXBlIHtcbiAgICAgICAgaWYgKC9eYi9pLnRlc3QoYXR0cikpIHJldHVybiBBdHRyaWJ1dGVUeXBlLkJJTkFSWTtcbiAgICAgICAgaWYgKC9ebi9pLnRlc3QoYXR0cikpIHJldHVybiBBdHRyaWJ1dGVUeXBlLk5VTUJFUjtcbiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZVR5cGUuU1RSSU5HO1xuICAgIH1cbiAgICBcblxuXG59Il19