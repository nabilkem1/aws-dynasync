"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncType = void 0;
class SyncType {
    constructor(fieldName, graphqlType = 'String') {
        this.fieldName = fieldName;
        this.graphqlType = (graphqlType instanceof SyncType) ? graphqlType.graphqlType : graphqlType;
        this.typeName = this.graphqlType.replace(/[^a-z\_]/gi, '');
        this.templateType = this.toCfnTemplateType();
    }
    get isList() {
        return /^\[[a-z]+[\?\!]?\]/i.test(this.graphqlType);
    }
    get isRequired() {
        return /^\[?[a-z]+\!\]?[\?\!]?$/i.test(this.graphqlType);
    }
    get isRequiredList() {
        return /\]\!$/.test(this.graphqlType);
    }
    getBaseOptions(options = {}) {
        return {
            isList: /^\[[a-z]+[\?\!]?\]/i.test(this.graphqlType),
            isRequired: /^\[?[a-z]+\!\]?[\?\!]?$/i.test(this.graphqlType),
            isRequiredList: /\]\!$/.test(this.graphqlType),
            ...options
        };
    }
    toDynamoAttribute() {
        if (/(int|float|timestamp)/i.test(this.typeName))
            return 'N';
        if (/boolean/i.test(this.typeName))
            return 'B';
        return 'S';
    }
    toTypescriptType() {
        let type = this.typeName.toLowerCase();
        if (['int', 'float'].includes(type))
            type = 'number';
        if (type === 'id')
            type = 'string';
        if (![
            'number',
            'string',
            'boolean'
        ].includes(type))
            return 'Record<string,any>';
        if (this.isList)
            type += '[]';
        return type;
    }
    toCfnTemplateType() {
        var _a;
        const words = this.typeName.split('_');
        const firstWord = ((_a = words.shift()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
        return firstWord + words.map(w => w.substring(0, 1).toUpperCase() + w.substring(1).toLowerCase()).join('');
    }
}
exports.SyncType = SyncType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy10eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2tleS9zeW5jLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsTUFBYSxRQUFRO0lBTWpCLFlBQ29CLFNBQWlCLEVBQ2pDLGNBQWlDLFFBQVE7UUFEekIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUdqQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsV0FBVyxZQUFZLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDN0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVELElBQUksY0FBYztRQUNkLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELGNBQWMsQ0FBQyxVQUE4QixFQUFFO1FBQzNDLE9BQU87WUFDSCxNQUFNLEVBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDbkQsVUFBVSxFQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQzVELGNBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDN0MsR0FBRyxPQUFPO1NBQ2IsQ0FBQTtJQUNMLENBQUM7SUFFRCxpQkFBaUI7UUFDYixJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxHQUFHLENBQUM7UUFDN0QsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPLEdBQUcsQ0FBQztRQUMvQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUFFLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckQsSUFBSSxJQUFJLEtBQUssSUFBSTtZQUFFLElBQUksR0FBRyxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDO1lBQ0QsUUFBUTtZQUNSLFFBQVE7WUFDUixTQUFTO1NBQ1osQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxvQkFBb0IsQ0FBQztRQUM5QyxJQUFJLElBQUksQ0FBQyxNQUFNO1lBQUUsSUFBSSxJQUFJLElBQUksQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8saUJBQWlCOztRQUNyQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLFNBQVMsR0FBRyxDQUFBLE1BQUEsS0FBSyxDQUFDLEtBQUssRUFBRSwwQ0FBRSxXQUFXLEVBQUUsS0FBSSxFQUFFLENBQUM7UUFDckQsT0FBTyxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM3QixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUNoRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNmLENBQUM7Q0FFSjtBQS9ERCw0QkErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHlwZU9wdGlvbnMsIEdyYXBocWxUeXBlT3B0aW9ucyB9IGZyb20gXCJAYXdzLWNkay9hd3MtYXBwc3luYy1hbHBoYVwiO1xuaW1wb3J0IHsgRHluYW1vQXR0cmlidXRlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBTeW5jVHlwZSBpbXBsZW1lbnRzIEJhc2VUeXBlT3B0aW9ucyB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZU5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcGxhdGVUeXBlOiBzdHJpbmdcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ3JhcGhxbFR5cGU6IHN0cmluZ1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICAgICAgZ3JhcGhxbFR5cGU6IHN0cmluZyB8IFN5bmNUeXBlID0gJ1N0cmluZydcbiAgICApIHtcbiAgICAgICAgdGhpcy5ncmFwaHFsVHlwZSA9IChncmFwaHFsVHlwZSBpbnN0YW5jZW9mIFN5bmNUeXBlKSA/IGdyYXBocWxUeXBlLmdyYXBocWxUeXBlIDogZ3JhcGhxbFR5cGU7XG4gICAgICAgIHRoaXMudHlwZU5hbWUgPSB0aGlzLmdyYXBocWxUeXBlLnJlcGxhY2UoL1teYS16XFxfXS9naSwgJycpO1xuICAgICAgICB0aGlzLnRlbXBsYXRlVHlwZSA9IHRoaXMudG9DZm5UZW1wbGF0ZVR5cGUoKTtcbiAgICB9XG5cbiAgICBnZXQgaXNMaXN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL15cXFtbYS16XStbXFw/XFwhXT9cXF0vaS50ZXN0KHRoaXMuZ3JhcGhxbFR5cGUpO1xuICAgIH1cblxuICAgIGdldCBpc1JlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL15cXFs/W2Etel0rXFwhXFxdP1tcXD9cXCFdPyQvaS50ZXN0KHRoaXMuZ3JhcGhxbFR5cGUpXG4gICAgfVxuXG4gICAgZ2V0IGlzUmVxdWlyZWRMaXN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL1xcXVxcISQvLnRlc3QodGhpcy5ncmFwaHFsVHlwZSk7XG4gICAgfVxuXG4gICAgZ2V0QmFzZU9wdGlvbnMob3B0aW9uczogR3JhcGhxbFR5cGVPcHRpb25zID0ge30pOiBCYXNlVHlwZU9wdGlvbnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNMaXN0Oi9eXFxbW2Etel0rW1xcP1xcIV0/XFxdL2kudGVzdCh0aGlzLmdyYXBocWxUeXBlKSxcbiAgICAgICAgICAgIGlzUmVxdWlyZWQ6L15cXFs/W2Etel0rXFwhXFxdP1tcXD9cXCFdPyQvaS50ZXN0KHRoaXMuZ3JhcGhxbFR5cGUpLFxuICAgICAgICAgICAgaXNSZXF1aXJlZExpc3Q6L1xcXVxcISQvLnRlc3QodGhpcy5ncmFwaHFsVHlwZSksXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0R5bmFtb0F0dHJpYnV0ZSgpOiBEeW5hbW9BdHRyaWJ1dGUge1xuICAgICAgICBpZiAoLyhpbnR8ZmxvYXR8dGltZXN0YW1wKS9pLnRlc3QodGhpcy50eXBlTmFtZSkpIHJldHVybiAnTic7XG4gICAgICAgIGlmICgvYm9vbGVhbi9pLnRlc3QodGhpcy50eXBlTmFtZSkpIHJldHVybiAnQic7XG4gICAgICAgIHJldHVybiAnUyc7IFxuICAgIH1cblxuICAgIHRvVHlwZXNjcmlwdFR5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnR5cGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChbJ2ludCcsICdmbG9hdCddLmluY2x1ZGVzKHR5cGUpKSB0eXBlID0gJ251bWJlcic7XG4gICAgICAgIGlmICh0eXBlID09PSAnaWQnKSB0eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGlmICghW1xuICAgICAgICAgICAgJ251bWJlcicsXG4gICAgICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgICAgICdib29sZWFuJ1xuICAgICAgICBdLmluY2x1ZGVzKHR5cGUpKSByZXR1cm4gJ1JlY29yZDxzdHJpbmcsYW55Pic7XG4gICAgICAgIGlmICh0aGlzLmlzTGlzdCkgdHlwZSArPSAnW10nO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvQ2ZuVGVtcGxhdGVUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gdGhpcy50eXBlTmFtZS5zcGxpdCgnXycpO1xuICAgICAgICBjb25zdCBmaXJzdFdvcmQgPSB3b3Jkcy5zaGlmdCgpPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgICAgICByZXR1cm4gZmlyc3RXb3JkICsgd29yZHMubWFwKHcgPT4gXG4gICAgICAgICAgICB3LnN1YnN0cmluZygwLDEpLnRvVXBwZXJDYXNlKCkgKyB3LnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkuam9pbignJyk7XG4gICAgfVxuXG59Il19